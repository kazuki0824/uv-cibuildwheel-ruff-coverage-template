name: Check, Build, and Release (not pure python)


on:
  workflow_call:

jobs:
  check:
    name: Ruff + Rustfmt + cargo check
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read

    steps:
      - uses: Kesin11/actions-timeline@v2
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: false

      - name: Run Ruff
        run: uvx ruff check . --preview

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Cache
        uses: Swatinem/rust-cache@v2

      - name: Run Rustfmt
        run: |
          cd ./rust/
          cargo fmt --check

      - name: Run cargo check
        run: |
          cd ./rust/
          cargo check

  tag_sanity:
    runs-on: ubuntu-latest
    name: Check tag name
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: false

      - name: RefName sanity
        run: |
          uv venv
          uv pip install setuptools_scm
          . .venv/bin/activate
          python -m setuptools_scm

  buildwheel-pyodide:
    name: Build wasm wheel
    runs-on: ubuntu-latest
    needs: [check, tag_sanity]
    permissions:
      actions: read
      contents: read

    steps:
      - uses: Kesin11/actions-timeline@v2
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: false

      - uses: mymindstorm/setup-emsdk@v14
        with:
          version: 3.1.58

      - name: Prepare prerequisites
        run: |
          uv venv
          uv pip install pyodide-build pip
          # workaround for https://github.com/PyO3/maturin/issues/2549#issuecomment-2797285836
          rustup target add wasm32-unknown-emscripten --toolchain nightly-2024-03-07
          rustup default nightly-2024-03-07

      - name: Build a wheel
        run: |
          . ./.venv/bin/activate
          pyodide build --build-dir wasm/

      - uses: actions/upload-artifact@v4
        with:
          name: wasm-wheel
          path: ./wasm/*.whl

  buildwheel:
    name: Build
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: true

    runs-on: ${{ matrix.os }}
    needs: [check, tag_sanity]
    permissions:
      actions: read
      contents: read

    steps:
      - uses: Kesin11/actions-timeline@v2
      - uses: actions/checkout@v4

      - name: Install llvm (Windows)
        uses: KyleMayes/install-llvm-action@v2
        if: contains(matrix.os, 'windows')
        with:
          version: 16.0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Cache
        uses: Swatinem/rust-cache@v2

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

 # === Release Job ===
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: buildwheel
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.whl
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
